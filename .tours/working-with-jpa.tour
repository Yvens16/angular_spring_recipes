{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Working-with-jpa",
  "steps": [
    {
      "title": "Introduction",
      "description": "### Introduction\n\nDans cette recette nous allons parlons un peu de Spring Data JPA. Le package qui nous permet de faire nos opérations en base de données. Aller suivez moi !"
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/service/Generator.java",
      "description": "### Setup\n\nAvant de commencer, j'ai créer un service, je vais pouvoir ajouter des méthodes qui vont m'être utile pour gérer la base de données pour plus de simplicité.\n\nIci, j'ai créer une méthode `generateUserList` qui va me générer une liste d'utilisateurs avec un nom, si il est actif ou non et un niveau.\n\nCette méthode sera appeler dans la méthode `CommandLineRunner` du fichier `SpringAppApplication` qui se lance juste après avoir initialiser le serveur spring boot. \n\n",
      "line": 30
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/SpringAppApplication.java",
      "description": "### J'appelle la méthode ici\nJuste ici.\n\nEnsuite, je vais pouvoir faire mon traitement sur les utilisateurs enregistré en base de données. ",
      "line": 31
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/repository/UserRepository.java",
      "description": "### JpaRepository\n\nNos repositories qui vont nous permettre d'agir sur nos tables (ici User) sont une extension de JpaRepository qui contient tout une liste de méthode par défaut nous permettant d'ajouter, de lire de mettre à jour et de suppripmer des élements en base de données. Vous pouvez faire un contrôle click sur JpaRepository pour voir son implémentation.\n\n### Mais ce qui nous intérreèse\n\nLà tout de suite ce qui nous intérrèse c'est comment créer nos propre méthode pour avoir plus de contrôle sur nos données requêter. Et pour cela, Jpa nous donne un méchanisme de création de requête sql basé sur le nom des champs de notre entité.",
      "line": 15
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/repository/UserRepository.java",
      "description": "### Méchanisme de création de requête à travers JPA\n\nVoici 3 exemples de requêtes \n- La 1ère permet de rechercher un utilisateur de par son username\n- La seconde permet de renvoyer une liste d'utilisateur tout ayant la valeur du champs `active` `true` ou `false`.\n- La dernière méthode permet de renvoyer un liste d'utilisateur qui auront chacun un niveau supérieur au niveau passer en paramètre.",
      "line": 17
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/SpringAppApplication.java",
      "description": "### findByUsername\n\nIci j'appelle la méthode qui permet de trouver un utilisateur par son username.",
      "line": 34
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/SpringAppApplication.java",
      "description": "### FindByActive\n\nIci j'ai fais 2 exemples, la méthode findByActive permet de renvoyer une liste d'utilisateurs active ou non selon le boolean passer en paramètres. \n\nVous pouvez voir la valeur des logs dans la console ou vous avez lancé votre serveur spring boot. \n\nVous avez d'abord la liste `userActives` et la liste `userNonActives`. ",
      "line": 42
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/SpringAppApplication.java",
      "description": "### FindByLevelGreaterThan\n\nEnsuite pour finir, nous avons la méthode `findByLevelGreaterThan` qui permet de renvoyer les utilisateurs qui ont un niveau supérieur au chiffre passer en paramètre. ",
      "line": 47
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/jpa.md",
      "description": "### Liste de mots clé\n\nPour finir, je vous ai fais une petite liste de mots clé utilisable dans le méchanisme de JPA.\nIl vous suffit de rechercher cette id:`shd101wyy.markdown-preview-enhanced` dans la barre de recherche des extensions Vscode.\n\nAprès avoir installer l'extension, il vous suffit de faire la commande cmd-shift-v ou ctrl-shift-v en étant sur le fichier jpa.md pour l'afficher de manière plus lisible.",
      "line": 4
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/repository/UserRepository.java",
      "description": "### Custom query\n\nMaintenant jetons un oeil query que vous pouvez créer en utilisant du SQL directement. \nIl vous suffit d'utiliser l'annotation `@Query` dans laquelle vous allez tapez votre requête.\nLorsque vous utiliser cette annotation, le nom de la méthode n'a pas de convention à suivre contrairement aux méthodes créer en utilisant le mécanisme de JPA. \n\nVous pouvez y passer des paramètres grâce à l'annotationn `@Param` et en utilisant les 2 points devant le paramètre dans la requête sql. Bien prendre le temps de comprendre le code ci-dessus. ",
      "line": 24
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/SpringAppApplication.java",
      "description": "### Call de la requête custom\n\nOn appelle la méthode comme tout autre méthodes.",
      "line": 50
    }
  ],
  "ref": "working_with_spring_data_jpa_spring_only"
}