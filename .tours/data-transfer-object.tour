{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Data Transfer Object",
  "steps": [
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/controller/Main.java",
      "description": "### Data Transfer Object\n\nLes DTO sont des objects qui vont vous aider √† g√©rer de mani√®re plus simple vos donn√©es et de d√©cider de quels donn√©es renvoy√©es l√† ou vous en avez besoin. Par exemple vous pourriez vouloir renvoyer vers le front le nom d'un utilisateur mais pas son id ni son email. Les DTO vous permettent justement de faire √ßa.\n\nIls vons aussi vous permettre de r√©soudre un probl√®me bien particulier lorsque vous voulez renvoyer des donn√©es faisant partie d'une relation on-to-many bidirectionnelle ou d'une relation many-to-many (Jackson infinite recurssion probl√®me ). ",
      "line": 21
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/dto/UserDto.java",
      "description": "### Le dossier\n\nDans le dossier dto, vous avez un dto pour l'entit√© Boat et un pour le User parce que jusqu'ici, ce sont les 2 entit√©s qui nous pose probl√®me. Nous allons voir pourquoi par la suite. Mais analysons d'abord au moins un de nos dtos. ",
      "line": 2
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/dto/BoatDto.java",
      "description": "### D'une entit√© √† une simple class Java (POJO)\n\nIci le role de notre DTO va √™tre de transf√©rer les donn√©es de notre entit√©. Boat vers une simple classe. Elle n'aura pas forc√©ment toute les m√©thodes de l'entit√© Boat, mais elle n'aura pas non plus ses limitations li√© √† Spring Data. ",
      "line": 27
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/dto/BoatDto.java",
      "description": "### Un constructeur\n\nJe lui d√©clare ici un constructeur pour pouvoir l'initialiser facilement quand j'en aurai besoin.",
      "line": 16
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/dto/BoatDto.java",
      "description": "### Getters\n\nPas besoin de setters ici car j'ajoute d√©j√† les attibuts requis √† travers le constructeur. Je n'aurai donc besoin que des getters pour pouvoir lire les donn√©es.\n\n##### Et puis c'est tout simple non ?\n\nComme vous avez pu le remarque mon Objet Boat devient un simple objet sans relation many-to-many ou one-to-many qui pourrait nous handicaper. Contrairement √† l'entity Boat.\n",
      "line": 32
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/controller/Main.java",
      "description": "#### Jackson infinite recursion\n#### Quel enfer ü•≤\n- Tout d'abord, je vous laisse lancer votre PostMan et faire les appels au routes ci-dessus. \n - Vous verrezque la relation one-to-many unidirectionelle ne cause aucun soucis\n - Par contre les relation one-to-many bidirectionelle elles, ne fonctionnent pas.\n\n#### Pourquoi ?\n\nTout simplement parce que les entit√©s User et Boat √©tant li√©s de mani√®re bidirectionnelle, elles font r√©f√©rence l'une √† l'autre. De m√™me pour les relation many-to-many.\n\nAu moment ou vous allez essayer de serializer une entit√© User ou une entit√© Boat en JSON pour le transf√©rer vers votre client.\nJackson le package qui s'occupe de √ßa, va essayer d'inclure une liste de bateau pour l'utilisateur et pour chaque Bateau, il va essayer d'inclure l'utilisateur √† qui il appartient. Et il va tourner en rond comme √ßa d'o√π la boucle infinie (Infinite r√©cursion).\n\nJackson ne saura pas s'arr√™ter et va tourner en rond. Jusqu'√† ce que vous lui disiez ou s'arr√™ter gr√¢ce √† un... ?\n\n### Data Transfer Object ahah \n\nJe vous laisse donc tester ces 2 appels pour voir le message d'erreur appara√Ætre.",
      "line": 49
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/controller/Main.java",
      "description": "#### Implementation du DTO dans le controller\n\nVoici donc comment on pet utiliser nos 2 DTO pour transformer nos entit√© User et Boat en POJO.\nVous avez les 2 examples `/users-solution` et `/boats-solution`.\n\nJe vous laisse donc tester dans Postman ces 2 appels api pour en voir le r√©sultat.\nEt je vous attend √† la prochaine √©tapes !",
      "line": 72
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/service/BoatMapper.java",
      "description": "### Le Mapper\n\nUne fois que vous avez compris comment utiliser le Dto en brut.\nVous pouvez utiliser un service pour abstraire l'impl√©mentation de la transformation en DTO et inversement pour ne pas avoir √† le r√©√©crire 1000 fois. \n\nVous n'aurez qu'√† injecter le service et faire appel √† ses 2 m√©thodes. ",
      "line": 30
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/service/BoatMapper.java",
      "description": "#### @Service\n\nUn service est une classe sp√©ciale qui doit contenir de la logique m√©tier. C'est √† dire que c'est ici qu'on devrait effectuer nos op√©rations, calculs, appels √† d'autre service ou repository. en voici un exemple tr√®s simple. \n\n```java\n@Service\npublic class UserService {\n\n    private final UserRepository userRepository;\n\n    @Autowired\n    public UserService(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    public User findUserById(Long id) {\n        return userRepository.findById(id);\n    }\n    \n    // ... autres m√©thodes de service\n}\n\n```\n\nOn verra cela un peu plus en d√©tails dans un cours sur l'architecture logicielle ou pas ahah.",
      "line": 10
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/service/BoatMapper.java",
      "description": "#### Entit√© en DTO\n\nVoici une premi√®re m√©thode qui transforme notre entit√© en dto.",
      "line": 14,
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 3,
          "character": 63
        }
      }
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/service/BoatMapper.java",
      "description": "#### DTO en Entit√©\n\nVoici une seconde m√©thode qui transforme notre dto en entit√©.\n\n##### Mais pourquoi vouloir retransf√©rer un dto en entit√© ? \n\nTout simplement parce qu'un fois la conversion faite vers un dto, vous ne pourrez plus faire d'op√©ration de persistence. Donc plus de sauvegarde possible en base de donn√©es. \n\nD'ou le besoin de retransformer l'objet DTO en entit√© dans certaines situations. ",
      "line": 27
    }
  ],
  "ref": "dto_spring_only"
}