{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Étape 1",
  "steps": [
    {
      "file": "spring_app/src/main/resources/application.properties",
      "description": "la propriété create-drop permet de repartir d'une base de données vide à chaque fois que l'application est arrêté et relancer. En l'occurence à chaque fois que vous sauvegardez votre code si vous avez ajouter la dépendance Spring Boot DevTools  ce qui est le cas ici. ahah.\n",
      "line": 15,
      "contents": "\n# Informations sur la BDD à exploiter\nspring.datasource.url=jdbc:mysql://localhost:3306/recipes?createDatabaseIfNotExist=true\n# database.url=jdbc:mysql://localhost:3306/userdb?createDatabaseIfNotExist=true\nspring.datasource.username=root\nspring.datasource.password=ton_mdp_perso\n\n# Autoriser l'affichage des requêtes SQL faites par Hibernate\nspring.jpa.show-sql=true\n\n# Règle le fuseau horaire sur GMT+2\nspring.jpa.properties.hibernate.jdbc.time_zone=Europe/Paris\n\n# Gérer Hibernate\nspring.jpa.hibernate.ddl-auto=create-drop\n"
    },
    {
      "file": "spring_app/src/main/resources/application.properties",
      "description": "la propriété create-drop permet de repartir d'une base de données vide à chaque fois que l'application est arrêté et relancer. En l'occurence à chaque fois que vous sauvegardez votre code si vous avez ajouter la dépendance Spring Boot DevTools ce qui est le cas ici. ahah",
      "line": 15,
      "contents": "\n# Informations sur la BDD à exploiter\nspring.datasource.url=jdbc:mysql://localhost:3306/recipes?createDatabaseIfNotExist=true\n# database.url=jdbc:mysql://localhost:3306/userdb?createDatabaseIfNotExist=true\nspring.datasource.username=root\nspring.datasource.password=ton_mdp_perso\n\n# Autoriser l'affichage des requêtes SQL faites par Hibernate\nspring.jpa.show-sql=true\n\n# Règle le fuseau horaire sur GMT+2\nspring.jpa.properties.hibernate.jdbc.time_zone=Europe/Paris\n\n# Gérer Hibernate\nspring.jpa.hibernate.ddl-auto=create-drop\n"
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/entity/User.java",
      "description": "On commence par ajouter une entité User",
      "line": 15,
      "contents": "package com.yvens_belaston_recipes.spring_app.entity;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport jakarta.persistence.CascadeType;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.JoinTable;\nimport jakarta.persistence.ManyToMany;\n\n@Entity\npublic class User {\n\n  @Id\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  private Long id;\n\n  private String username;\n\n  @ManyToMany(cascade = CascadeType.MERGE)\n  @JoinTable(name = \"user_role\", joinColumns = @JoinColumn(name = \"user_id\"), inverseJoinColumns = @JoinColumn(name = \"role_id\"))\n\n  private Set<Role> roles = new HashSet<>();\n\n  public User() {\n  }\n\n  public Long getId() {\n    return id;\n  }\n\n  public void setId(Long id) {\n    this.id = id;\n  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public Set<Role> getRoles() {\n    return roles;\n  }\n\n  public void setRoles(Set<Role> roles) {\n    this.roles = roles;\n  }\n\n  public String getRolesToString() {\n    String rolesToString = \"\";\n    for (Role role : roles) {\n      rolesToString += role.getTitle() + \" \";\n    }\n    return rolesToString;\n  }\n\n  public void addRole(Role role) {\n    roles.add(role);\n  }\n\n}\n"
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/entity/User.java",
      "description": "CascadeType.MERGE permet d'ajouter de nouveaux roles à un utilisateur ou de mettre à jour un role déjà existant là ou CascadeType.PERSIST ne permet que de créer de nouveaux roles. On aurait une erreur si un rôle existait déjà et qu'on essayait de l'ajouter à un nouvel utilisateur.",
      "line": 24,
      "contents": "package com.yvens_belaston_recipes.spring_app.entity;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport jakarta.persistence.CascadeType;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.JoinTable;\nimport jakarta.persistence.ManyToMany;\n\n@Entity\npublic class User {\n\n  @Id\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  private Long id;\n\n  private String username;\n\n  @ManyToMany(cascade = CascadeType.MERGE)\n  @JoinTable(name = \"user_role\", joinColumns = @JoinColumn(name = \"user_id\"), inverseJoinColumns = @JoinColumn(name = \"role_id\"))\n\n  private Set<Role> roles = new HashSet<>();\n\n  public User() {\n  }\n\n  public Long getId() {\n    return id;\n  }\n\n  public void setId(Long id) {\n    this.id = id;\n  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public Set<Role> getRoles() {\n    return roles;\n  }\n\n  public void setRoles(Set<Role> roles) {\n    this.roles = roles;\n  }\n\n  public String getRolesToString() {\n    String rolesToString = \"\";\n    for (Role role : roles) {\n      rolesToString += role.getTitle() + \" \";\n    }\n    return rolesToString;\n  }\n\n  public void addRole(Role role) {\n    roles.add(role);\n  }\n\n}\n"
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/entity/User.java",
      "description": "```java\n@JoinTable(name = \"user_role\", joinColumns = @JoinColumn(name = \"user_id\"), inverseJoinColumns = @JoinColumn(name = \"role_id\"))\n```\nIci ce bout de code indique que l'on crée une table de jointure du nom de ```user_role```  avec des tuples composé d'un champs ```user_id``` faisant référence à l'id de la table User. Et d'un champs ```role_id``` faisant référence à l'id de la table Role.",
      "line": 25,
      "contents": "package com.yvens_belaston_recipes.spring_app.entity;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport jakarta.persistence.CascadeType;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.JoinTable;\nimport jakarta.persistence.ManyToMany;\n\n@Entity\npublic class User {\n\n  @Id\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  private Long id;\n\n  private String username;\n\n  @ManyToMany(cascade = CascadeType.MERGE)\n  @JoinTable(name = \"user_role\", joinColumns = @JoinColumn(name = \"user_id\"), inverseJoinColumns = @JoinColumn(name = \"role_id\"))\n\n  private Set<Role> roles = new HashSet<>();\n\n  public User() {\n  }\n\n  public Long getId() {\n    return id;\n  }\n\n  public void setId(Long id) {\n    this.id = id;\n  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public Set<Role> getRoles() {\n    return roles;\n  }\n\n  public void setRoles(Set<Role> roles) {\n    this.roles = roles;\n  }\n\n  public String getRolesToString() {\n    String rolesToString = \"\";\n    for (Role role : roles) {\n      rolesToString += role.getTitle() + \" \";\n    }\n    return rolesToString;\n  }\n\n  public void addRole(Role role) {\n    roles.add(role);\n  }\n\n}\n"
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/entity/User.java",
      "description": "Je vous passe l'explication des getters et des setters, mais la fonction qui suit permet d'afficher les roles associés à un utilisateur lorsque vous l'appeler.\n\n```java public String getRolesToString() {\n    String rolesToString = \"\";\n    for (Role role : roles) {\n      rolesToString += role.getTitle() + \" \";\n    }\n    return rolesToString;\n  }```",
      "line": 56,
      "contents": "package com.yvens_belaston_recipes.spring_app.entity;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport jakarta.persistence.CascadeType;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.JoinTable;\nimport jakarta.persistence.ManyToMany;\n\n@Entity\npublic class User {\n\n  @Id\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  private Long id;\n\n  private String username;\n\n  @ManyToMany(cascade = CascadeType.MERGE)\n  @JoinTable(name = \"user_role\", joinColumns = @JoinColumn(name = \"user_id\"), inverseJoinColumns = @JoinColumn(name = \"role_id\"))\n\n  private Set<Role> roles = new HashSet<>();\n\n  public User() {\n  }\n\n  public Long getId() {\n    return id;\n  }\n\n  public void setId(Long id) {\n    this.id = id;\n  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public Set<Role> getRoles() {\n    return roles;\n  }\n\n  public void setRoles(Set<Role> roles) {\n    this.roles = roles;\n  }\n\n  public String getRolesToString() {\n    String rolesToString = \"\";\n    for (Role role : roles) {\n      rolesToString += role.getTitle() + \" \";\n    }\n    return rolesToString;\n  }\n\n  public void addRole(Role role) {\n    roles.add(role);\n  }\n\n}\n"
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/entity/User.java",
      "description": "Le HashSet est un type de list dont les valeurs ne peuvent êre ni ```null``` ni présente en double.\nPratique pour s'assurer qu'une liste ne contient pas de doublon. Si vous essayer d'ajouter un élément alors qu'il se trouve déjà dans la liste cela ne fonctionnera pas. ",
      "line": 27,
      "contents": "package com.yvens_belaston_recipes.spring_app.entity;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport jakarta.persistence.CascadeType;\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.JoinColumn;\nimport jakarta.persistence.JoinTable;\nimport jakarta.persistence.ManyToMany;\n\n@Entity\npublic class User {\n\n  @Id\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  private Long id;\n\n  private String username;\n\n  @ManyToMany(cascade = CascadeType.MERGE)\n  @JoinTable(name = \"user_role\", joinColumns = @JoinColumn(name = \"user_id\"), inverseJoinColumns = @JoinColumn(name = \"role_id\"))\n\n  private Set<Role> roles = new HashSet<>();\n\n  public User() {\n  }\n\n  public Long getId() {\n    return id;\n  }\n\n  public void setId(Long id) {\n    this.id = id;\n  }\n\n  public String getUsername() {\n    return username;\n  }\n\n  public void setUsername(String username) {\n    this.username = username;\n  }\n\n  public Set<Role> getRoles() {\n    return roles;\n  }\n\n  public void setRoles(Set<Role> roles) {\n    this.roles = roles;\n  }\n\n  public String getRolesToString() {\n    String rolesToString = \"\";\n    for (Role role : roles) {\n      rolesToString += role.getTitle() + \" \";\n    }\n    return rolesToString;\n  }\n\n  public void addRole(Role role) {\n    roles.add(role);\n  }\n\n}\n"
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/entity/Role.java",
      "description": "Ensuite nous créeons l'entité Role pour définir les roles possibles dans notre application.",
      "line": 1,
      "contents": "package com.yvens_belaston_recipes.spring_app.entity;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport jakarta.persistence.Entity;\nimport jakarta.persistence.GeneratedValue;\nimport jakarta.persistence.GenerationType;\nimport jakarta.persistence.Id;\nimport jakarta.persistence.ManyToMany;\n\n@Entity\npublic class Role {\n\n  @Id\n  @GeneratedValue(strategy = GenerationType.IDENTITY)\n  private Long id;\n\n  private String title;\n\n  @ManyToMany(mappedBy = \"roles\")\n  private Set<User> users = new HashSet<>();\n\n  public Role() {\n  }\n\n  public Long getId() {\n    return id;\n  }\n\n  public void setId(Long id) {\n    this.id = id;\n  }\n\n  public String getTitle() {\n    return title;\n  }\n\n  public void setTitle(String title) {\n    this.title = title;\n  }\n\n  public Set<User> getUsers() {\n    return users;\n  }\n\n  public void setUsers(Set<User> users) {\n    this.users = users;\n  }\n\n  public void addUser(User user) {\n    users.add(user);\n  }\n}\n"
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/repository/RoleRepository.java",
      "description": "Nous n'oublions pas de créer les repository correspondant, celui la pour l'entité Role...",
      "line": 3,
      "contents": "package com.yvens_belaston_recipes.spring_app.repository;\n\nimport java.util.Optional;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport com.yvens_belaston_recipes.spring_app.entity.Role;\n\n@Repository\npublic interface RoleRepository extends JpaRepository<Role, Long> {\n\n  Optional<Role> findByTitle(String string);\n\n}\n"
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/repository/UserRepository.java",
      "description": "Et celui la pour l'entité User",
      "line": 1,
      "contents": "package com.yvens_belaston_recipes.spring_app.repository;\n\nimport java.util.Optional;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\nimport com.yvens_belaston_recipes.spring_app.entity.User;\n\n@Repository\npublic interface UserRepository extends JpaRepository<User, Long> {\n\n  Optional<User> findByUsername(String string);\n\n}"
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/SpringAppApplication.java",
      "description": "Par soucis de simplicité nous allons utiliser l'interface CommandLineRunner qui spécifie une méthode ```run``` qui s'éxécute juste après que l'application spring boot ai finit de s'initialiser.\nCela permet de lancer des actions sans avoir à créer un @Controller par exemple. On a juste à lancer le serveur et les actions s'éxécute direct. ",
      "line": 24,
      "contents": "package com.yvens_belaston_recipes.spring_app;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\n\nimport com.yvens_belaston_recipes.spring_app.entity.Role;\nimport com.yvens_belaston_recipes.spring_app.entity.User;\nimport com.yvens_belaston_recipes.spring_app.repository.RoleRepository;\nimport com.yvens_belaston_recipes.spring_app.repository.UserRepository;\n\n@SpringBootApplication\npublic class SpringAppApplication {\n\t@Autowired UserRepository userRepository;\n\t@Autowired RoleRepository roleRepository;\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SpringAppApplication.class, args);\n\t}\n\n\t@Bean\n\tpublic CommandLineRunner run() throws Exception {\n\t\treturn (String[] args) -> {\n\n\t\t\tRole normal_user_role = new Role();\n\t\t\tnormal_user_role.setTitle(\"ROLE_USER\");\n\n\t\t\tRole admin_role = new Role();\n\t\t\tadmin_role.setTitle(\"ROLE_ADMIN\");\n\n\t\t\tnormal_user_role = roleRepository.save(normal_user_role);\n\t\t\tadmin_role = roleRepository.save(admin_role);\n\n\n\t\t\tUser user = new User();\n\t\t\tuser.setUsername(\"user\");\n\n\t\t\tUser admin = new User();\n\t\t\tadmin.setUsername(\"admin\");\n\n\t\t\tuser.getRoles().add(normal_user_role);\n\t\t\tnormal_user_role.getUsers().add(user);\n\n\t\t\t\n\t\t\tadmin.getRoles().add(normal_user_role);\n\t\t\tnormal_user_role.getUsers().add(admin);\n\n\t\t\tadmin.getRoles().add(admin_role);\n\t\t\tadmin_role.getUsers().add(admin);\n\t\t\t\n\t\t\tuserRepository.save(user);\n\t\t\tuserRepository.save(admin);\n\t\t};\n\t}\n}\n"
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/SpringAppApplication.java",
      "description": "Ici après avoir crée des roles entre la ligne 27 et 31, je les sauvegarde en base de données à la ligne 33 et 34. Ce que vous devriez faire normalement aussi avant de créer des Utilisateurs. Si votre projet à un besoin pour des roles bien sûr. \n\n",
      "line": 34,
      "contents": "package com.yvens_belaston_recipes.spring_app;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\n\nimport com.yvens_belaston_recipes.spring_app.entity.Role;\nimport com.yvens_belaston_recipes.spring_app.entity.User;\nimport com.yvens_belaston_recipes.spring_app.repository.RoleRepository;\nimport com.yvens_belaston_recipes.spring_app.repository.UserRepository;\n\n@SpringBootApplication\npublic class SpringAppApplication {\n\t@Autowired UserRepository userRepository;\n\t@Autowired RoleRepository roleRepository;\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SpringAppApplication.class, args);\n\t}\n\n\t@Bean\n\tpublic CommandLineRunner run() throws Exception {\n\t\treturn (String[] args) -> {\n\n\t\t\tRole normal_user_role = new Role();\n\t\t\tnormal_user_role.setTitle(\"ROLE_USER\");\n\n\t\t\tRole admin_role = new Role();\n\t\t\tadmin_role.setTitle(\"ROLE_ADMIN\");\n\n\t\t\tnormal_user_role = roleRepository.save(normal_user_role);\n\t\t\tadmin_role = roleRepository.save(admin_role);\n\n\n\t\t\tUser user = new User();\n\t\t\tuser.setUsername(\"user\");\n\n\t\t\tUser admin = new User();\n\t\t\tadmin.setUsername(\"admin\");\n\n\t\t\tuser.getRoles().add(normal_user_role);\n\t\t\tnormal_user_role.getUsers().add(user);\n\n\t\t\t\n\t\t\tadmin.getRoles().add(normal_user_role);\n\t\t\tnormal_user_role.getUsers().add(admin);\n\n\t\t\tadmin.getRoles().add(admin_role);\n\t\t\tadmin_role.getUsers().add(admin);\n\t\t\t\n\t\t\tuserRepository.save(user);\n\t\t\tuserRepository.save(admin);\n\t\t};\n\t}\n}\n"
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/SpringAppApplication.java",
      "description": "Je crée ensuite un utilisateur du nom de ```user``` et un autre du nom de ```admin``` pour bien séparer les 2. ",
      "line": 41,
      "contents": "package com.yvens_belaston_recipes.spring_app;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\n\nimport com.yvens_belaston_recipes.spring_app.entity.Role;\nimport com.yvens_belaston_recipes.spring_app.entity.User;\nimport com.yvens_belaston_recipes.spring_app.repository.RoleRepository;\nimport com.yvens_belaston_recipes.spring_app.repository.UserRepository;\n\n@SpringBootApplication\npublic class SpringAppApplication {\n\t@Autowired UserRepository userRepository;\n\t@Autowired RoleRepository roleRepository;\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SpringAppApplication.class, args);\n\t}\n\n\t@Bean\n\tpublic CommandLineRunner run() throws Exception {\n\t\treturn (String[] args) -> {\n\n\t\t\tRole normal_user_role = new Role();\n\t\t\tnormal_user_role.setTitle(\"ROLE_USER\");\n\n\t\t\tRole admin_role = new Role();\n\t\t\tadmin_role.setTitle(\"ROLE_ADMIN\");\n\n\t\t\tnormal_user_role = roleRepository.save(normal_user_role);\n\t\t\tadmin_role = roleRepository.save(admin_role);\n\n\n\t\t\tUser user = new User();\n\t\t\tuser.setUsername(\"user\");\n\n\t\t\tUser admin = new User();\n\t\t\tadmin.setUsername(\"admin\");\n\n\t\t\tuser.getRoles().add(normal_user_role);\n\t\t\tnormal_user_role.getUsers().add(user);\n\n\t\t\t\n\t\t\tadmin.getRoles().add(normal_user_role);\n\t\t\tnormal_user_role.getUsers().add(admin);\n\n\t\t\tadmin.getRoles().add(admin_role);\n\t\t\tadmin_role.getUsers().add(admin);\n\t\t\t\n\t\t\tuserRepository.save(user);\n\t\t\tuserRepository.save(admin);\n\t\t};\n\t}\n}\n"
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/SpringAppApplication.java",
      "description": "Ici à la ligne 43 et 44 je vais bien spécifier la relation many to many entre mon utilisateur et son role de manière bidirectionnelle. Pourquoi Bidirectionnelle? Car comme ça je pourrais récuperer des utilisateurs selon leur role ou inversement. Je pourrais récuper tous roles d'un utilisateur.\n\nSi la relation était unidirectionnelle, je ne pourrais que récuperer les roles d'un utilisateurs mais pas l'inverse. ",
      "line": 44,
      "contents": "package com.yvens_belaston_recipes.spring_app;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\n\nimport com.yvens_belaston_recipes.spring_app.entity.Role;\nimport com.yvens_belaston_recipes.spring_app.entity.User;\nimport com.yvens_belaston_recipes.spring_app.repository.RoleRepository;\nimport com.yvens_belaston_recipes.spring_app.repository.UserRepository;\n\n@SpringBootApplication\npublic class SpringAppApplication {\n\t@Autowired UserRepository userRepository;\n\t@Autowired RoleRepository roleRepository;\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SpringAppApplication.class, args);\n\t}\n\n\t@Bean\n\tpublic CommandLineRunner run() throws Exception {\n\t\treturn (String[] args) -> {\n\n\t\t\tRole normal_user_role = new Role();\n\t\t\tnormal_user_role.setTitle(\"ROLE_USER\");\n\n\t\t\tRole admin_role = new Role();\n\t\t\tadmin_role.setTitle(\"ROLE_ADMIN\");\n\n\t\t\tnormal_user_role = roleRepository.save(normal_user_role);\n\t\t\tadmin_role = roleRepository.save(admin_role);\n\n\n\t\t\tUser user = new User();\n\t\t\tuser.setUsername(\"user\");\n\n\t\t\tUser admin = new User();\n\t\t\tadmin.setUsername(\"admin\");\n\n\t\t\tuser.getRoles().add(normal_user_role);\n\t\t\tnormal_user_role.getUsers().add(user);\n\n\t\t\t\n\t\t\tadmin.getRoles().add(normal_user_role);\n\t\t\tnormal_user_role.getUsers().add(admin);\n\n\t\t\tadmin.getRoles().add(admin_role);\n\t\t\tadmin_role.getUsers().add(admin);\n\t\t\t\n\t\t\tuserRepository.save(user);\n\t\t\tuserRepository.save(admin);\n\t\t};\n\t}\n}\n"
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/SpringAppApplication.java",
      "description": "Je le fais 2 fois ici pour l'admin en la ligne 50 et 54 parce que je lui ai ajouté le role ```ROLE_USER```  ainsi que le role ```ROLE_ADMIN```. ",
      "line": 51,
      "contents": "package com.yvens_belaston_recipes.spring_app;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\n\nimport com.yvens_belaston_recipes.spring_app.entity.Role;\nimport com.yvens_belaston_recipes.spring_app.entity.User;\nimport com.yvens_belaston_recipes.spring_app.repository.RoleRepository;\nimport com.yvens_belaston_recipes.spring_app.repository.UserRepository;\n\n@SpringBootApplication\npublic class SpringAppApplication {\n\t@Autowired UserRepository userRepository;\n\t@Autowired RoleRepository roleRepository;\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SpringAppApplication.class, args);\n\t}\n\n\t@Bean\n\tpublic CommandLineRunner run() throws Exception {\n\t\treturn (String[] args) -> {\n\n\t\t\tRole normal_user_role = new Role();\n\t\t\tnormal_user_role.setTitle(\"ROLE_USER\");\n\n\t\t\tRole admin_role = new Role();\n\t\t\tadmin_role.setTitle(\"ROLE_ADMIN\");\n\n\t\t\tnormal_user_role = roleRepository.save(normal_user_role);\n\t\t\tadmin_role = roleRepository.save(admin_role);\n\n\n\t\t\tUser user = new User();\n\t\t\tuser.setUsername(\"user\");\n\n\t\t\tUser admin = new User();\n\t\t\tadmin.setUsername(\"admin\");\n\n\t\t\tuser.getRoles().add(normal_user_role);\n\t\t\tnormal_user_role.getUsers().add(user);\n\n\t\t\t\n\t\t\tadmin.getRoles().add(normal_user_role);\n\t\t\tnormal_user_role.getUsers().add(admin);\n\n\t\t\tadmin.getRoles().add(admin_role);\n\t\t\tadmin_role.getUsers().add(admin);\n\t\t\t\n\t\t\tuserRepository.save(user);\n\t\t\tuserRepository.save(admin);\n\t\t};\n\t}\n}\n"
    },
    {
      "file": "spring_app/src/main/java/com/yvens_belaston_recipes/spring_app/SpringAppApplication.java",
      "description": "Puis je finis par sauvegarder les utilisateur pour enregistrer les changements que je viens de faire par rapports aux utilisateurs que j'ai crée ainsi que le role que je leur ai assigné. ",
      "line": 54,
      "contents": "package com.yvens_belaston_recipes.spring_app;\n\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\n\nimport com.yvens_belaston_recipes.spring_app.entity.Role;\nimport com.yvens_belaston_recipes.spring_app.entity.User;\nimport com.yvens_belaston_recipes.spring_app.repository.RoleRepository;\nimport com.yvens_belaston_recipes.spring_app.repository.UserRepository;\n\n@SpringBootApplication\npublic class SpringAppApplication {\n\t@Autowired UserRepository userRepository;\n\t@Autowired RoleRepository roleRepository;\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SpringAppApplication.class, args);\n\t}\n\n\t@Bean\n\tpublic CommandLineRunner run() throws Exception {\n\t\treturn (String[] args) -> {\n\n\t\t\tRole normal_user_role = new Role();\n\t\t\tnormal_user_role.setTitle(\"ROLE_USER\");\n\n\t\t\tRole admin_role = new Role();\n\t\t\tadmin_role.setTitle(\"ROLE_ADMIN\");\n\n\t\t\tnormal_user_role = roleRepository.save(normal_user_role);\n\t\t\tadmin_role = roleRepository.save(admin_role);\n\n\n\t\t\tUser user = new User();\n\t\t\tuser.setUsername(\"user\");\n\n\t\t\tUser admin = new User();\n\t\t\tadmin.setUsername(\"admin\");\n\n\t\t\tuser.getRoles().add(normal_user_role);\n\t\t\tnormal_user_role.getUsers().add(user);\n\n\t\t\t\n\t\t\tadmin.getRoles().add(normal_user_role);\n\t\t\tnormal_user_role.getUsers().add(admin);\n\n\t\t\tadmin.getRoles().add(admin_role);\n\t\t\tadmin_role.getUsers().add(admin);\n\t\t\t\n\t\t\tuserRepository.save(user);\n\t\t\tuserRepository.save(admin);\n\t\t};\n\t}\n}\n"
    }
  ]
}